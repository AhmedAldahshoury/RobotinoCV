
#include <iostream>
#include <opencv2/opencv.hpp>
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"


using namespace std;
using namespace cv;

int main( )
{
    Mat image;
    image = imread("/home/ahmed/Desktop/1.jpeg", CV_LOAD_IMAGE_COLOR);
    namedWindow( "window1", 2 );   imshow( "window1", image );

    // Load Face cascade (.xml file)
    CascadeClassifier face_cascade;

    face_cascade.load( "/home/ahmed/Desktop/data/cascade.xml" );

    // Detect faces
    std::vector<Rect> faces;
    // face_cascade.detectMultiScale( image, faces, 1.1, 2, 0|CV_HAAR_SCALE_IMAGE, Size(30, 30) );
    face_cascade.detectMultiScale(image,faces,1.1,1000,0);

    // Draw circles on the detected faces
    for( int i = 0; i < faces.size(); i++ )
    {
        // Point center( faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5 );
        rectangle( image, cvPoint(faces[i].x,faces[i].y),cvPoint(faces[i].width+faces[i].x,faces[i].height+faces[i].y),CV_RGB(0,255,0), 3, 8,0);
        //ellipse( image, center, Size( faces[i].width*0.5, faces[i].height*0.5), 0, 0, 360, Scalar( 255, 0, 255 ), 4,
        //        8, 0 );
    }

    imshow( "Detected Face", image );

    waitKey(0);
    return 0;
}
